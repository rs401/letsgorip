// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: place.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaceServiceClient is the client API for PlaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaceServiceClient interface {
	CreatePlace(ctx context.Context, in *Place, opts ...grpc.CallOption) (*PlaceIdResponse, error)
	GetPlace(ctx context.Context, in *PlaceIdRequest, opts ...grpc.CallOption) (*Place, error)
	GetPlaces(ctx context.Context, in *GetPlacesRequest, opts ...grpc.CallOption) (PlaceService_GetPlacesClient, error)
	UpdatePlace(ctx context.Context, in *Place, opts ...grpc.CallOption) (*Place, error)
	DeletePlace(ctx context.Context, in *PlaceIdRequest, opts ...grpc.CallOption) (*PlaceIdResponse, error)
}

type placeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaceServiceClient(cc grpc.ClientConnInterface) PlaceServiceClient {
	return &placeServiceClient{cc}
}

func (c *placeServiceClient) CreatePlace(ctx context.Context, in *Place, opts ...grpc.CallOption) (*PlaceIdResponse, error) {
	out := new(PlaceIdResponse)
	err := c.cc.Invoke(ctx, "/pb.PlaceService/CreatePlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) GetPlace(ctx context.Context, in *PlaceIdRequest, opts ...grpc.CallOption) (*Place, error) {
	out := new(Place)
	err := c.cc.Invoke(ctx, "/pb.PlaceService/GetPlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) GetPlaces(ctx context.Context, in *GetPlacesRequest, opts ...grpc.CallOption) (PlaceService_GetPlacesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlaceService_ServiceDesc.Streams[0], "/pb.PlaceService/GetPlaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &placeServiceGetPlacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlaceService_GetPlacesClient interface {
	Recv() (*Place, error)
	grpc.ClientStream
}

type placeServiceGetPlacesClient struct {
	grpc.ClientStream
}

func (x *placeServiceGetPlacesClient) Recv() (*Place, error) {
	m := new(Place)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *placeServiceClient) UpdatePlace(ctx context.Context, in *Place, opts ...grpc.CallOption) (*Place, error) {
	out := new(Place)
	err := c.cc.Invoke(ctx, "/pb.PlaceService/UpdatePlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) DeletePlace(ctx context.Context, in *PlaceIdRequest, opts ...grpc.CallOption) (*PlaceIdResponse, error) {
	out := new(PlaceIdResponse)
	err := c.cc.Invoke(ctx, "/pb.PlaceService/DeletePlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaceServiceServer is the server API for PlaceService service.
// All implementations must embed UnimplementedPlaceServiceServer
// for forward compatibility
type PlaceServiceServer interface {
	CreatePlace(context.Context, *Place) (*PlaceIdResponse, error)
	GetPlace(context.Context, *PlaceIdRequest) (*Place, error)
	GetPlaces(*GetPlacesRequest, PlaceService_GetPlacesServer) error
	UpdatePlace(context.Context, *Place) (*Place, error)
	DeletePlace(context.Context, *PlaceIdRequest) (*PlaceIdResponse, error)
	mustEmbedUnimplementedPlaceServiceServer()
}

// UnimplementedPlaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaceServiceServer struct {
}

func (UnimplementedPlaceServiceServer) CreatePlace(context.Context, *Place) (*PlaceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlace not implemented")
}
func (UnimplementedPlaceServiceServer) GetPlace(context.Context, *PlaceIdRequest) (*Place, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlace not implemented")
}
func (UnimplementedPlaceServiceServer) GetPlaces(*GetPlacesRequest, PlaceService_GetPlacesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPlaces not implemented")
}
func (UnimplementedPlaceServiceServer) UpdatePlace(context.Context, *Place) (*Place, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlace not implemented")
}
func (UnimplementedPlaceServiceServer) DeletePlace(context.Context, *PlaceIdRequest) (*PlaceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlace not implemented")
}
func (UnimplementedPlaceServiceServer) mustEmbedUnimplementedPlaceServiceServer() {}

// UnsafePlaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaceServiceServer will
// result in compilation errors.
type UnsafePlaceServiceServer interface {
	mustEmbedUnimplementedPlaceServiceServer()
}

func RegisterPlaceServiceServer(s grpc.ServiceRegistrar, srv PlaceServiceServer) {
	s.RegisterService(&PlaceService_ServiceDesc, srv)
}

func _PlaceService_CreatePlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Place)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).CreatePlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlaceService/CreatePlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).CreatePlace(ctx, req.(*Place))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_GetPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).GetPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlaceService/GetPlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).GetPlace(ctx, req.(*PlaceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_GetPlaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPlacesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlaceServiceServer).GetPlaces(m, &placeServiceGetPlacesServer{stream})
}

type PlaceService_GetPlacesServer interface {
	Send(*Place) error
	grpc.ServerStream
}

type placeServiceGetPlacesServer struct {
	grpc.ServerStream
}

func (x *placeServiceGetPlacesServer) Send(m *Place) error {
	return x.ServerStream.SendMsg(m)
}

func _PlaceService_UpdatePlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Place)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).UpdatePlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlaceService/UpdatePlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).UpdatePlace(ctx, req.(*Place))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_DeletePlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).DeletePlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PlaceService/DeletePlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).DeletePlace(ctx, req.(*PlaceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaceService_ServiceDesc is the grpc.ServiceDesc for PlaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PlaceService",
	HandlerType: (*PlaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlace",
			Handler:    _PlaceService_CreatePlace_Handler,
		},
		{
			MethodName: "GetPlace",
			Handler:    _PlaceService_GetPlace_Handler,
		},
		{
			MethodName: "UpdatePlace",
			Handler:    _PlaceService_UpdatePlace_Handler,
		},
		{
			MethodName: "DeletePlace",
			Handler:    _PlaceService_DeletePlace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPlaces",
			Handler:       _PlaceService_GetPlaces_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "place.proto",
}
